diff --git raylib/build.zig raylib/build.zig
index 4ba9e0b..9d2496e 100644
--- raylib/build.zig
+++ raylib/build.zig
@@ -88,13 +88,16 @@ const dir_raylib = cwd ++ sep ++ "raylib/src";
 
 const raylib_build = @import("raylib/src/build.zig");
 
-fn linkThisLibrary(b: *std.build.Builder, target: std.zig.CrossTarget) *std.build.LibExeObjStep {
-    const exe = b.addStaticLibrary("raylib-zig", null);
+fn linkThisLibrary(b: *std.build.Builder, target: std.zig.CrossTarget, optimize: std.builtin.OptimizeMode) *std.build.LibExeObjStep {
+    const exe = b.addStaticLibrary(.{
+        .name = "raylib-zig",
+        .target = target,
+        .optimize = optimize,
+    });
     exe.addIncludePath(dir_raylib);
     exe.addIncludePath(cwd);
     exe.linkLibC();
     exe.addCSourceFile(cwd ++ sep ++ "marshal.c", &.{});
-    _ = target;
     // const lib_raylib = raylib_build.addRaylib(b, target);
     // exe.linkLibrary(lib_raylib);
 
@@ -102,12 +105,13 @@ fn linkThisLibrary(b: *std.build.Builder, target: std.zig.CrossTarget) *std.buil
 }
 
 /// add this package to exe
-pub fn addTo(b: *std.build.Builder, exe: *std.build.LibExeObjStep, target: std.zig.CrossTarget) void {
-    exe.addPackagePath("raylib", cwd ++ sep ++ "raylib.zig");
+pub fn addTo(b: *std.build.Builder, exe: *std.build.LibExeObjStep, target: std.zig.CrossTarget, optimize: std.builtin.OptimizeMode) void {
+    // exe.addPackagePath("raylib", cwd ++ sep ++ "raylib.zig");
+    exe.addAnonymousModule("raylib", std.build.CreateModuleOptions{ .source_file = .{ .path = cwd ++ sep ++ "raylib.zig" } });
     exe.addIncludePath(dir_raylib);
     exe.addIncludePath(cwd);
-    const lib = linkThisLibrary(b, target);
-    const lib_raylib = raylib_build.addRaylib(b, target);
+    const lib = linkThisLibrary(b, target, optimize);
+    const lib_raylib = raylib_build.addRaylib(b, target, optimize);
     exe.linkLibrary(lib_raylib);
     exe.linkLibrary(lib);
 }
